{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi there \ud83d\udc4b, I'm Anand Gupta!","text":"<p>Follow me on: </p> <p>Experienced data scientist professional who digs into data to create valuable products and insights. Currently working with conversational agents in real time low latency environment. Passionate about impacting the lives of end users with technology. </p> <p>Few of the domains I have worked in:</p> <ul> <li>Conversational agents</li> <li>Data insights and visualization</li> <li>Data mining</li> <li>Recommendation systems</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udcbb Tech Stack:","text":"<ul> <li> <p>Main Stack</p> <p> </p> </li> <li> <p>Others</p> <p> </p> </li> </ul>"},{"location":"#recent-blog-posts","title":"Recent blog posts","text":"<ul> <li> <p> Kaggle's EDA</p> <p>EDA on Kaggle's credit card dataset</p> <p> Read more...</p> </li> </ul>"},{"location":"blog/credit-card-data-kaggle-eda/","title":"Fraud credit card data - EDA","text":"<p>This article describes how I used different machine learning models to try to predict credit card fraud and see which works best.</p> creditcard image from unsplash <p>To the reader</p> <p>The original version of this article was written for Medium.com here I have attempted to export my articles here. The formatting might be off in a few places</p>","tags":["Kaggle","Analysis"]},{"location":"blog/credit-card-data-kaggle-eda/#motivation","title":"Motivation","text":"<p>Well, I am studying data science at AAIC and as a case study, I am required to analyze and write a blog about a problem where I applied Machine Learning models to help solve the problem.</p>","tags":["Kaggle","Analysis"]},{"location":"blog/credit-card-data-kaggle-eda/#data-source","title":"Data Source","text":"<p>The data for credit card fraud case study can be found with this link. It is a Kaggle link from where you can download the data and work on it.</p>","tags":["Kaggle","Analysis"]},{"location":"blog/credit-card-data-kaggle-eda/#initial-findings-eda","title":"Initial Findings (EDA)","text":"<p>After importing the necessary packages and reading the data into a pandas dataframe, we start analyzing it.</p> credit card data info <p>With the <code>info()</code> method we can see :</p> <ul> <li>all the columns</li> <li>all data types</li> <li>whether any columns contain null or not as its values We can also see by the numbers written beside the names that there are no missing data in any of the columns.</li> </ul> <p>Next up we analyse the \u201ctime\u201d column in the dataset.</p> <p>Will update rest of the article soon</p> <p>Back to homepage</p>","tags":["Kaggle","Analysis"]},{"location":"blog/indian-roads-object-detection/","title":"Object Detection on Indian Roads using TensorFlow","text":"<p>Let's see how we can use Google\u2019s Object Detection Model on Indian roads.</p> Photo by Atharva Tulsi on Unsplash <p>To the reader</p> <p>The original version of this article was written for Medium.com here I have attempted to export my articles here.</p>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#origin","title":"Origin:","text":"<p>First of all, let\u2019s talk about the dataset. The dataset containing all the relevant data can be found here. The dataset consists of images obtained from a front-facing camera attached to a car. The car was driven around Hyderabad, Bangalore cities and their outskirts. The images are mostly of 1080p resolution, but there are also some images with 720p and other resolutions.</p> <p>To download the data you click on Dataset -&gt; Download. Before the data starts to download you have to sign in with your account.</p> <p>Once, the download is complete there will be 2 folders available:</p> <ul> <li>Detection Folder</li> <li>Segmentation Folder Since I am working on detecting objects, I worked on the Detection folder.</li> </ul>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#inside-the-folder","title":"Inside the folder:","text":"<p>Inside the detection folder, there are 3 main things:</p>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#jpegimages-folder","title":"JpegImages Folder","text":"<p>This folder contains all the pictures that are extracted from the videos recorded while driving around some Indian cities.</p> <ol> <li>Annotation Folder \u2014 This folder contains all the annot files for each training image in a \u201c.xml\u201d. The annot files are in the Pascal VOC format.</li> <li>There are also 3 \u201c.txt\u201d files named \u2014 train, test, val. These files contain the relative path to each image in the folder which states whether the files will be used for train, test or val which is validation.</li> </ol> <p>Note</p> <p>I have tried to implement different executions of other models like Yolo, Yolo-v3 but since they did not work correctly, I am choosing to write only about the one that did.</p>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#choosing-what-to-execute","title":"Choosing what to execute:","text":"<p>I was reading articles before working on this project, on the Object Detection API by Google \u2014 how it is a single stop solution to implement all the major models of computer vision and decided to give it a go.</p> <p>Next most important thing was to choose what model I wanted to execute to detect objects from the images. The Object Detection API has the capability to execute many different types of models, like ssd_mobilenet_v1, faster_rcnn_resnet50 to name a few.</p> <p>The complete list of models and the weights that they are trained on can be found in Tensorflow detection model zoo.</p> <p>Each model named here has 2 columns listed beside it. One is for \u201cSpeed\u201d \u2014 how quickly can a model predict and another is \u201cmAP\u201d \u2014 which loosely translates to how accurate the model is usually (based on test conditions). Point to note here is that there is usually a tradeoff between speed and accuracy in these models</p> <p>So after reviewing all the models, I decided to go with ssd_inception_v2_coco as it provides a good trade-off between speed and accuracy.</p>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#implementing-the-model","title":"Implementing the model","text":"<p>Well, to be honest, the best step by step guide on how to implement the model is given here. The tutorial has detailed writeup on how to go about executing the model and all the best practice ways to do it like setting up a workspace.</p> <p>But here are some of my pointers/learnings that I followed while working on this problem.</p> <p>After following the tutorial to implement a ssd_inception_v2_coco model I had to test it on the images of Indian traffic/roads.</p> <p>Here are some of the output images:</p> <ul> <li>Sample Image 1   </li> <li>Sample Image 2   </li> <li>Sample Image 3   </li> </ul> <p>As we can see that the model does a pretty good job of detecting relevant objects on the input images with a moderate confidence rate.</p>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#dont-mess-around-with-your-original-anaconda-environment-if-you-are-not-confident","title":"Don\u2019t mess around with your original anaconda environment if you are not confident.","text":"I use anaconda for my projects locally and I have a bad history with goofing up the original installation of anaconda which resulted in multiple errors while using the TensorFlow with GPU. This in turn can lead to multiple resets and uninstall of PATH variables, GPU drivers, etc   The best solution to this problem would be to make a new Conda environment for this project. I am linking an excellent blog/tutorial on how to start with this here.","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#there-is-a-big-flaw-that-i-discovered-much-later-while-working-with-this-dataset","title":"There is a big flaw that I discovered much later while working with this dataset.","text":"As I have already discussed that the dataset consists of JPEGImages and XML files. The images and the xml files (should ideally) have a 1-to-1 relationship i.e. for every \u201c.jpg\u201d training image there should be a \u201c.xml\u201d file.   Unfortunately such is not the scenario for the dataset provided here.","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#processing-and-separation-of-files-are-important-due-to-the-above-mentioned-reason","title":"Processing and Separation of files are important due to the above-mentioned reason.","text":"So here is what I did. Since the images provided were of 3 types:<ol> <li>Train \u2014 for training</li> <li>Test \u2014 for testing</li> <li>Val \u2014 for validation   So I wrote a script to read the file name of every training image and check if the corresponding xml file exists. If yes, then copy both the image and xml file to another folder called \u201ctraining\u201d.   Repeat the process for test and val, only that the test images don\u2019t have any corresponding xml files obviously.</li> <li>During the part where you need to install Protobuf, be careful not to install the version 3.5 or more. This will save you a lot of time by utilising the multi-file selection wildcard (i.e *.proto)</li> <li>While converting the .xml to .csv and from .csv to .record I copy-pasted the scripts and executed them using Jupyter Notebooks. I was easy to edit and provide easy debug on the code lines. Also, I could change the way the script was talking inputs based on my new folder structure.</li> <li>While executing the custom training of your model be sure to lower the training batch number based on your machine\u2019s capabilities. Otherwise it may lead to errors and training will stop.</li> </ol>","tags":["Computer Vision"]},{"location":"blog/indian-roads-object-detection/#end-notes","title":"End Notes:","text":"<p>While I did want to train on custom data (I actually did it halfway before running into a bunch of errors and dependency issues) I feel the pre-trained labels works fairly for images of Indian roads and traffic.</p> <p>While work on autonomous cars have miles to go (no pun intended) before being able to tackle the chaotic and unstructured nature of Indian roads, working on object detection models are definitely the way forward.</p>","tags":["Computer Vision"]},{"location":"blog/category/technical/","title":"Technical","text":""}]}